/* demo program for cc65 on the atari lynx */
#include <lynx.h>
#include "sprite.h"
#include "test.h"

#define SCREEN_ADDR 0x8000

char invader1[] = {
    0x03, 0x18, 0x00, 0x03, 0x3c, 0x00, 0x03, 0x7e, 0x00, 0x03, 0xdb,
    0x00, 0x03, 0xff, 0x00, 0x03, 0xff, 0x00, 0x03, 0x5a, 0x00, 0x03,
    0x81, 0x00, 0x03, 0x42, 0x00, 0x00 };

char invader2[] = {
    0x03, 0x18, 0x00, 0x03, 0x3c, 0x00, 0x03, 0x7e, 0x00, 0x03, 0xdb,
    0x00, 0x03, 0xff, 0x00, 0x03, 0xff, 0x00, 0x03, 0x24, 0x00, 0x03,
    0x5a, 0x00, 0x03, 0xa5, 0x00, 0x00 };

char blank[] = {
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00,
};

struct scb_bit3 compressed =
{ { BITS3|NORMAL, RELHVST|DRIGHT|DDOWN,
    DONTCOLLIDE, 0x0000, 0, 0, 0, 0x100, 0x100, 0, 0}, {0x01, 0x23, 0x045, 0x6f }, 0x00 };
    
struct scb_bit1 scb[12] = {
{ { BITS1|BKGRNDNOCOL, LITERAL|RELHVST|DRIGHT|DDOWN,
    DONTCOLLIDE, 0x0000, 0, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00 },
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 1 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 2 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 3 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 4 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 5 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 6 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 7 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 8 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 9 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 10 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 11 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00}};
    
main()
{
    int x,y,dx,k,l;
    int *j;
    char *a;
    
    a = 0xfff9; *a = 0x00;    /* map suzy, mickey, roms (fc, fd, fe, ff) */
    a = 0xfc83; *a = 0xf3;    /* yuck this --- (SPRINIT) */
    a = 0xfd8c; *a = 0x1c;    /* clear serial data bogosities */
    a = 0xfd80; *a = 0xff;    /* disable all mikey interrupts */

#asm
    cli       ; it shouldn't lock up at this point
              ; if it does, there is a pending interrupt that
	      ; hasn't been cleared.
#endasm

    make_scan_table();

#asm
    pha
    lda $fc92
    lsr a
    bcc suzydone
    lda #$01
    sta $fc91        ;  /* startup sprite engine */
    stz $fd91        ;  /* go to sleep */
;loopfoo:            ;          /* if you are expecting interrupts, */
    stz $fd90        ;  /* ack suzy */
;    lda $fc92       ;          /* then uncomment these lines. */
;    lsr a           ;          /* this one too */
;    bcs loopfoo     ;          /* this one too */
suzydone:
    pla
#endasm

    a = 0xfc92; *a = 0x26;        /* clear unsafe access bit, left hand */
    j = 0xfd94; *j = SCREEN_ADDR; /* set screen base address */

    poke(0xfda0, 0x0); poke(0xfdb0, 0x00);
    poke(0xfda1, 0xf); poke(0xfdb1, 0x00);
    poke(0xfda2, 0x0); poke(0xfdb2, 0xf0);
    poke(0xfda3, 0xf); poke(0xfdb3, 0xf0);
    poke(0xfda4, 0x0); poke(0xfdb4, 0x0f);
    poke(0xfda5, 0xf); poke(0xfdb5, 0x0f);
    poke(0xfda6, 0x0); poke(0xfdb6, 0xff);
    
    poke(0xfdaf, 0xf); poke(0xfdbf, 0xff);
    
#asm
    pha
    stz $fc04   ;     ; initialize basic suzy/sprite engine values
    stz	$fc06
    stz $fc0a   ;     ; collision buffer
    lda #$a0    ;     ; collision buffer
    sta $fc0b   ;     ; collision buffer
    lda #21     ; B1COLLOFFSET
    sta $fc24
    lda #$7f
    sta $fc28
    sta $fc2a
    lda #$01
    sta $fc90
    pla
#endasm

    scb[0].scb1.sprdata = blank;
    for (x = 1; x < 12; x++)
      {
      if (x&1)
        scb[x].scb1.sprdata = invader1;
      else
        scb[x].scb1.sprdata = invader2;
      scb[x-1].scb1.next = &scb[x];
      scb[x].scb1.x = (x-1)*10;
      }
      
    compressed.scb3.sprdata = test_sprite;
    scb[0].scb1.next = &compressed;
    compressed.scb3.next = &scb[1];

x = 10;
y = 0;
dx = 2;
while (1) /*y < 90) */
  {
#asm
  pha
vretrace:
  lda $fd0a
  cmp #$03
  bcs vretrace
  pla
#endasm


#asm
    pha
    phx
    stz $fc08        ;  /* video build buffer */
    lda #$80
    sta $fc09
    ldax #_scb
    sta $fc10
    stx $fc11
    lda #$01
    sta $fc91        ;  /* startup sprite engine */
    stz $fd91        ;  /* go to sleep */
;loopfoo:            ;          /* if you are expecting interrupts, */
    stz $fd90        ;  /* ack suzy */
;    lda $fc92       ;          /* then uncomment these lines. */
;    lsr a           ;          /* this one too */
;    bcs loopfoo     ;          /* this one too */
    plx
    pla
#endasm

  l = x;
  for (k = 1; k < 12; k++, l+= 10)
    scb[k].scb1.x = l;
    
  scb[0].scb1.y = y;
  x += dx;
  if (x < 0 || x > 50)
    {
    dx = -dx;
    x += dx;
    y = y + 2;
    if (y>90) y = 0;
    for (k = 1; k < 12; k++)
      scb[k].scb1.y = y;
    }
  }
    
    while(1)
      {
      poke(0xfda0, peek(0xfda0)+1);
#asm
  pha
vretrace2:
  lda $fd0a
  cmp #$65
  bcc vretrace2
vrt3:
  lda $fd0a
  cmp #$02
  bcs vrt3
  pla
#endasm
      }
}

char scanbasl[102];
char scanbash[102];

make_scan_table()
{
  int i;
  
  for (i=0; i < 102; i++)
    {
    scanbasl[i] = (i*80+SCREEN_ADDR)&0xff;
    scanbash[i] = ((i*80+SCREEN_ADDR)>>8)&0xff;
    }
}

poke(a,b) char *a; char b; { *a = b; }
peek(a) char *a; { return *a; }
