/* demo program for cc65 on the atari lynx */
#include <lynx.h>
#include <lynxlib.h>
#include "sprite.h"
#include "test.h"

#define SCREEN_ADDR 0x8000

char invader1[] = {
    0x03, 0x18, 0x00, 0x03, 0x3c, 0x00, 0x03, 0x7e, 0x00, 0x03, 0xdb,
    0x00, 0x03, 0xff, 0x00, 0x03, 0xff, 0x00, 0x03, 0x5a, 0x00, 0x03,
    0x81, 0x00, 0x03, 0x42, 0x00, 0x00 };

char invader2[] = {
    0x03, 0x18, 0x00, 0x03, 0x3c, 0x00, 0x03, 0x7e, 0x00, 0x03, 0xdb,
    0x00, 0x03, 0xff, 0x00, 0x03, 0xff, 0x00, 0x03, 0x24, 0x00, 0x03,
    0x5a, 0x00, 0x03, 0xa5, 0x00, 0x00 };

char blank[] = {
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  21,   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00,
};

struct scb_bit3 compressed =
{ { BITS3|NORMAL, RELHVST|DRIGHT|DDOWN,
    DONTCOLLIDE, 0x0000, 0, 0, 0, 0x100, 0x100, 0, 0}, {0x01, 0x23, 0x045, 0x6f }, 0x00 };
    
struct scb_bit1 scb[12] = {
{ { BITS1|BKGRNDNOCOL, LITERAL|RELHVST|DRIGHT|DDOWN,
    DONTCOLLIDE, 0x0000, 0, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00 },
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 1 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 2 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 3 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 4 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 5 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 6 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 7 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 8 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 9 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 10 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00},
{ { BITS1|NORMAL, LITERAL|RELHVST|DRIGHT|DDOWN, DONTCOLLIDE,  /* 11 */
    0x0000, 0x0000, 0, 0, 0x100, 0x100, 0, 0}, { 0x0f }, 0x00}};
    
char pal[]={0x0, 0xf ,0x0 ,0xf ,0x0,0xf,0x0 ,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,
            0x00,0x00,0xf0,0xf0,0xf,0xf,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff};

main()
{
    int x,y,dx,k,l;
    int *j;
    char *a;
    
    InitIRQ();

#asm
    cli         ; enable Interrupts
#endasm

/* enable collide */   

    sprsys = _sprsys = _sprsys & 0xdf;
 
    SetBuffers(SCREEN_ADDR,(char *)0,0xA000); /* set screen base address */

    DrawFBox(0,0,160,102,0);

    SetRGB(pal);

    colloff = 21; /* B1COLLOFFSET */    

    scb[0].scb1.sprdata = blank;
    for (x = 1; x < 12; ++x)
      {
      if (x&1)
        scb[x].scb1.sprdata = invader1;
      else
        scb[x].scb1.sprdata = invader2;
      scb[x-1].scb1.next = &scb[x];
      scb[x].scb1.x = (x-1)*10;
      }
      
    compressed.scb3.sprdata = test_sprite;
    scb[0].scb1.next = &compressed;
    compressed.scb3.next = &scb[1];

x = 10;
y = 0;
dx = 2;
while (1) /*y < 90)*/ 
  {
#asm
vretrace:
  lda $fd0a
  bne vretrace
#endasm

  DrawSprite(scb);

  l = x;
  for (k = 1; k < 12; ++k, l+= 10)
    scb[k].scb1.x = l;
    
  scb[0].scb1.y = y;
  x += dx;
  if (x < 0 || x > 50)
    {
    dx = -dx;
    x += dx;
    y += 2;

    if (y>90) y = 0;
    for (k = 1; k < 12; ++k)
      scb[k].scb1.y = y;
    }
  }
    
    while(1)
      {
      POKE(0xfda0, PEEK(0xfda0)+1);
#asm
vretrace2:
  lda $fd0a
  cmp #$65
  bcc vretrace2
vrt3:
  lda $fd0a
  cmp #$02
  bcs vrt3
#endasm
      }
}

